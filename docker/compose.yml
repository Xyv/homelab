# Define sensitive variables in write protected files (chmod 600) and use then as secrets
# Makes it possible to share/git the docker-compose.yml file without sharing sensitive data
# Make sure the secrets folder is added to the .gitignore file
secrets:
  duckdns_token:
    file: ${DOCKER_CONFIG_DIR}/secrets/duckdns_token.secrets

networks:
  default:
  proxy:
    name: proxy

volumes:
  letsencrypt_certificates:
    name: letsencrypt_certificates

services:
  traefik:
    image: traefik:${TRAEFIK_VERSION}
    container_name: ${PROJECT_NAME}-traefik
    restart: always
    security_opt:
      - no-new-privileges:true
    secrets:
      - duckdns_token
    ports:
      - "80:80"
      - "443:443"
    environment:
      TZ: ${TZ}
      DUCKDNS_TOKEN_FILE: /run/secrets/duckdns_token
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      # Activate api and dashboard
      - --api=true
      - --api.debug=true
      - --api.insecure=false
      - --api.dashboard=true
      # Listen to docker provider but don't activate traefik by default
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy
      # Entrypoints definition
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # HTTP-to-HTTPS Redirect
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # Domain name And TLS config
      - --entrypoints.websecure.http.tls.certresolver=${CERTS_RESOLVER}
      - --entrypoints.websecure.http.tls.domains=${DOMAIN_NAME}
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN_NAME}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN_NAME}
      # Set staging and production certificates resolvers
      ## Staging
      - --certificatesresolvers.staging.acme.caserver=${CERTS_STAGING_CA_SERVER}
      - --certificatesresolvers.staging.acme.email=${CERTS_EMAIL}
      - --certificatesresolvers.staging.acme.keytype=${CERTS_KEY_TYPE}
      - --certificatesresolvers.staging.acme.storage=${CERTS_STORAGE}
      - --certificatesresolvers.staging.acme.dnschallenge=true
      - --certificatesresolvers.staging.acme.dnschallenge.provider=${CERTS_PROVIDER}
      # # For some reason the container does not have dns resolution, pass it the local dns server for proper name resolution
      # - --certificatesresolvers.staging.acme.dnschallenge.resolvers=${NS1}:53
      # # In some cases this is still not enough, we need to bypass the normal propagation check wait, and just wait for a 1 min
      # - --certificatesresolvers.staging.acme.dnschallenge.disablePropagationCheck=true
      # - --certificatesresolvers.staging.acme.dnschallenge.delayBeforeCheck=60
      ## Production
      - --certificatesresolvers.production.acme.caserver=${CERTS_PROD_CA_SERVER}
      - --certificatesresolvers.production.acme.email=${CERTS_EMAIL}
      - --certificatesresolvers.production.acme.keytype=${CERTS_KEY_TYPE}
      - --certificatesresolvers.production.acme.storage=${CERTS_STORAGE}
      - --certificatesresolvers.production.acme.dnschallenge=true
      - --certificatesresolvers.production.acme.dnschallenge.provider=${CERTS_PROVIDER}
      # # For some reason the container does not have dns resolution, pass it the local dns server for proper name resolution
      # - --certificatesresolvers.production.acme.dnschallenge.resolvers=${NS1}:53
      # # In some cases this is still not enough, we need to bypass the normal propagation check wait, and just wait for a 1 min
      # - --certificatesresolvers.production.acme.dnschallenge.disablePropagationCheck=true
      # - --certificatesresolvers.production.acme.dnschallenge.delayBeforeCheck=60
      # LOGGING
      - --log=true
      - --log.level=${TRAEFIK_LOG_LEVEL}
      - --accessLog=true
      # - --accessLog.filters.statusCodes=204-299,400-499,500-599
    networks:
      - proxy
    volumes:
      - letsencrypt_certificates:/certs
      # TODO: Do not directly expose the docker socket, see https://doc.traefik.io/traefik/providers/docker/#docker-api-access
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.rule: Host(`traefik.${DOMAIN_NAME}`)
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.service: api@internal

  whoami:
    image: traefik/whoami
    container_name: whoami
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    labels:
      traefik.enable: true
      traefik.http.routers.whoami.rule: Host(`whoami.${DOMAIN_NAME}`)
      traefik.http.routers.whoami.entrypoints: websecure
    networks:
      - proxy
