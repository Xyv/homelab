services:
  traefik:
    image: traefik:${TRAEFIK_VERSION}
    container_name: ${PROJECT_NAME}-traefik
    ports:
      - "80:80"
      - "4443:443"
    networks:
      proxy:
      socket_proxy:
    secrets:
      - duckdns_token
    environment:
      TZ: ${TZ}
      DUCKDNS_TOKEN_FILE: /run/secrets/duckdns_token
      DOMAIN_NAME: ${DOMAIN_NAME}
      UNIFI_CONTROLLER_IP: ${UNIFI_CONTROLLER_IP}
      XOCE_IP: ${XOCE_IP}
      NS1: ${NS1}
      NS2: ${NS2}
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      # Activate api and dashboard
      - --api=true
      - --api.debug=false
      - --api.insecure=false
      - --api.dashboard=true
      # Listen to docker provider but don't activate traefik by default
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy
      # Use docker-socket-proxy to avoid exposing the full socket, see https://doc.traefik.io/traefik/providers/docker/#docker-api-access
      - --providers.docker.endpoint=tcp://docker-socket-proxy:2375
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
      # Load rules for non local docker services from files
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      # Entrypoints definition
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.dns-tcp.address=:53
      - --entrypoints.dns-udp.address=:53/udp
      # Unifi entrypoints
      - --entrypoints.unifi-inform.address=:8080
      - --entrypoints.unifi-portal.address=:8843
      - --entrypoints.unifi-stun.address=:3478/udp
      - --entrypoints.unifi-l2-discovery.address=:1900/udp
      - --entrypoints.unifi-ap-discovery.address=:10001/udp
      # HTTP-to-HTTPS Redirect
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # Domain name And TLS config
      # - --entrypoints.websecure.forwardedHeaders.trustedIPs=$REMOTE_IPS,$LOCAL_IPS # Set REMOTE_IPS to VPS IP
      - --entrypoints.websecure.http.tls.certresolver=${CERTS_RESOLVER}
      - --entrypoints.websecure.http.tls.domains=${DOMAIN_NAME}
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN_NAME}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN_NAME}
      # Set staging and production certificates resolvers
      ## Staging
      - --certificatesresolvers.staging.acme.caserver=${CERTS_STAGING_CA_SERVER}
      - --certificatesresolvers.staging.acme.email=${CERTS_EMAIL}
      - --certificatesresolvers.staging.acme.keytype=${CERTS_KEY_TYPE}
      - --certificatesresolvers.staging.acme.storage=${CERTS_STORAGE}
      - --certificatesresolvers.staging.acme.dnschallenge=true
      - --certificatesresolvers.staging.acme.dnschallenge.provider=${CERTS_PROVIDER}
      # # For some reason the container does not have dns resolution, pass it the local dns server for proper name resolution
      # - --certificatesresolvers.staging.acme.dnschallenge.resolvers=${NS1}:53
      # # In some cases this is still not enough, we need to bypass the normal propagation check wait, and just wait for a 1 min
      # - --certificatesresolvers.staging.acme.dnschallenge.disablePropagationCheck=true
      # - --certificatesresolvers.staging.acme.dnschallenge.delayBeforeCheck=60
      ## Production
      - --certificatesresolvers.production.acme.caserver=${CERTS_PROD_CA_SERVER}
      - --certificatesresolvers.production.acme.email=${CERTS_EMAIL}
      - --certificatesresolvers.production.acme.keytype=${CERTS_KEY_TYPE}
      - --certificatesresolvers.production.acme.storage=${CERTS_STORAGE}
      - --certificatesresolvers.production.acme.dnschallenge=true
      - --certificatesresolvers.production.acme.dnschallenge.provider=${CERTS_PROVIDER}
      # # For some reason the container does not have dns resolution, pass it the local dns server for proper name resolution
      # - --certificatesresolvers.production.acme.dnschallenge.resolvers=${NS1}:53
      # # In some cases this is still not enough, we need to bypass the normal propagation check wait, and just wait for a 1 min
      # - --certificatesresolvers.production.acme.dnschallenge.disablePropagationCheck=true
      # - --certificatesresolvers.production.acme.dnschallenge.delayBeforeCheck=60
      # LOGGING
      - --log=true
      - --log.level=${TRAEFIK_LOG_LEVEL}
      - --accessLog=true
      # - --accessLog.bufferingSize=100 # Only useful when logging to file, keep buffersingSize in RAM before saving to disk
      - --accessLog.filters.statusCodes=204-299,400-499,500-599 # Don't log successful and redirect connections
    volumes:
      - letsencrypt_certificates:/certs
      - ${DOCKER_CONFIG_DIR}/traefik/rules:/rules
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.service: api@internal
